generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  name       String?
  roleId     Int
  role       Role    @relation(fields: [roleId], references: [id])
  avatar     String?
  googleId   String? @unique
  facebookId String? @unique

  // credits
  freeCredits Int     @default(5)
  paidCredits Int     @default(0)
  stripeId    String? // stripe customer id

  // relations
  translations Translation[]
  essays       EssaySubmission[]
  payments     Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Translation {
  id             Int      @id @default(autoincrement())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id])
  sourceLang     String
  targetLang     String
  originalText   String
  translatedText String
  createdAt      DateTime @default(now())
  fromCache      Boolean  @default(false)
}

model Prompt {
  id        Int               @id @default(autoincrement())
  taskType  String // "Task1" | "Task2"
  question  String
  essays    EssaySubmission[]
  createdAt DateTime          @default(now())

  @@unique([question, taskType]) // ✅ đảm bảo không có 2 prompt giống nhau
}


enum EssayStatus {
  PENDING
  DONE
  FAILED
}

model EssaySubmission {
  id        Int          @id @default(autoincrement())
  userId    Int
  promptId  Int
  text      String
  status    EssayStatus  @default(PENDING)
  grading   AIGrading?
  createdAt DateTime     @default(now())

  user   User   @relation(fields: [userId], references: [id])
  prompt Prompt @relation(fields: [promptId], references: [id])
}

model AIGrading {
  id                Int      @id @default(autoincrement())
  submissionId      Int      @unique

  // Scores
  overallBand       Float
  taskResponse      Float
  coherenceCohesion Float
  lexicalResource   Float
  grammaticalRange  Float

  // Feedback tổng quan
  feedback          String

  // Extra fields
  annotations       Json     // list lỗi: start, end, errorType, suggestion
  vocabulary        Json     // gợi ý từ vựng thay thế
  sentenceTips      Json     // gợi ý rewrite câu
  structureTips     String?  // tip về bố cục
  meta              Json     // wordCount, grammarErrorCount, spellingErrorCount,...

  createdAt         DateTime @default(now())

  submission EssaySubmission @relation(fields: [submissionId], references: [id])
}

model Plan {
  id            Int       @id @default(autoincrement())
  name          String
  price         Int // in cents (USD)
  credits       Int
  stripePriceId String    @unique
  isActive      Boolean   @default(true)
  payments      Payment[]
  createdAt     DateTime  @default(now())
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  stripeId  String // checkout id / payment intent id
  amount    Int
  currency  String   @default("usd")
  status    String   // succeeded / failed / pending
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}
